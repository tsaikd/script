#!/bin/bash

PN="${0##*/}"
PD="${0%/*}"

source "${PD}/lib/die"
source "${PD}/lib/checknecprog"

function usage() {
	cat <<EOF
Usage: ${PN} [Options] <Commit>
Options:
  -h       : show this help message
  -f       : force push

Commit:
  Commit hash value
EOF
	if [ $# -gt 0 ] ; then
		echo
		echo "$@" >&2
		exit 1
	else
		exit 0
	fi
}

checknecprog git cut grep

(($# == 0)) && usage "Invalid parameters"
opt="$(getopt -o hf -- "$@")"
(($? != 0)) && usage "Parse options failed"

eval set -- "${opt}"
while true ; do
	case "${1}" in
	-h) usage ; shift ;;
	-f) force_push=1 ; shift ;;
	--) shift ; break ;;
	*) echo "Internal error!" ; exit 1 ;;
	esac
done

(($# < 1)) && usage "Invalid parameters"

push_commit="${1}"
shift

# check is in git repository
msg="$(git branch 2>&1)"
if [ $? -ne 0 ] ; then
	echo "${msg}"
	exit 1
fi

# get some status
cur_branch="$(grep "^*" <<<"${msg}" | cut -b 3-)"
cur_remote="$(git config --get "branch.${cur_branch}.remote")"
cur_merge="$(git config --get "branch.${cur_branch}.merge")"

[ "${cur_remote}" ] || die "Empty remote branch"
[ "${cur_merge}" ] || die "Empty merge branch"

if [ "${force_push}" == "1" ] ; then
	git push "${cur_remote}" "+${push_commit}:${cur_merge}" || die
else
	git push "${cur_remote}" "${push_commit}:${cur_merge}" || die
fi

