#!/bin/bash

PN="${BASH_SOURCE[0]##*/}"
PD="${BASH_SOURCE[0]%/*}"

source "${PD}/lib/die"

function usage() {
	cat <<EOF
Usage: ${PN} [OPTIONS]
Options:
	-h        : show this help message
	-p <name> : set project name by hand instead of detection
	-a        : extract all
	-C <dir>  : set output dir instead of "./html/"
	-D        : debug mode
EOF
	[ $# -gt 0 ] && { echo ; die "$@" ; } || exit 0
}

type getopt cat grep sed less doxygen >/dev/null || exit $?

opt="$(getopt -o hp:aC:D -- "$@")" || usage "Parse options failed"

eval set -- "${opt}"
while true ; do
	case "${1}" in
	-h) usage ; shift ;;
	-p) projname="${2##*/}" ; shift 2 ;;
	-a) F_EXTRACTALL=1 ; shift ;;
	-C) OUT_DIR="${2}" ; shift 2 ;;
	-D) F_DEBUG=1 ; shift ;;
	--) shift ; break ;;
	*) echo "Internal error!" ; exit 1 ;;
	esac
done

HAVE_DOT="$(type dot 2>/dev/null)"

if [ -z "${projname}" ] ; then
	buf="${PWD}"
	projname="${buf##*/}"
	while [ "$(grep -E "^(src|tmp)$" <<<"${projname}")" ] ; do
		buf="${buf%/*}"
		projname="${buf##*/}"
	done
fi

if [ -z "${projnum}" ] ; then
	if [ "$(type git 2>/dev/null)" ] ; then
		head="$(git log -n 1 --pretty=format:'%H' 2>/dev/null)"
		if [ "${head}" ] ; then
			tag="$(git tag | tail -n 1)"
			if [ "${tag}" ] ; then
				buf="$(git log "${tag}..${head}")"
				[ "${buf}" ] && tag="${head}"
			else
				tag="${head}"
			fi
			projnum="\"git ${tag}\""
		fi
	fi
fi

Doxyfile="$(doxygen -g - | \
	sed -r "s/^(PROJECT_NAME\s*=).*$/\1 ${projname}/" | \
	sed -r "s/^(GENERATE_LATEX\s*=).*$/\1 NO/" | \
	sed -r "s/^(TAB_SIZE\s*=).*$/\1 4/" | \
	sed -r "s/^(DETAILS_AT_TOP\s*=).*$/\1 YES/" | \
	sed -r "s/^(RECURSIVE\s*=).*$/\1 YES/" | \
	sed -r "s/^(EXTRACT_LOCAL_METHODS\s*=).*$/\1 YES/" | \
	sed -r "s/^(EXTRACT_ANON_NSPACES\s*=).*$/\1 YES/" | \
	sed -r "s/^(EXTRACT_PRIVATE\s*=).*$/\1 YES/" | \
	sed -r "s/^(EXTRACT_STATIC\s*=).*$/\1 YES/" | \
	sed -r "s/^(HTML_DYNAMIC_SECTIONS\s*=).*$/\1 YES/" | \
	sed -r "s/^(SHOW_USED_FILES\s*=).*$/\1 NO/" | \
	cat
)"

if [ "${projnum}" ] ; then
	Doxyfile="$(echo "${Doxyfile}" | \
	sed -r "s/^(PROJECT_NUMBER\s*=).*$/\1 ${projnum}/" | \
	cat)"
fi

if [ "${HAVE_DOT}" ] ; then
	Doxyfile="$(echo "${Doxyfile}" | \
	sed -r "s/^(HAVE_DOT\s*=).*$/\1 YES/" | \
	cat)"
fi

if ((F_EXTRACTALL == 1)) ; then
	Doxyfile="$(echo "${Doxyfile}" | \
	sed -r "s/^(EXTRACT_ALL\s*=).*$/\1 YES/" | \
	sed -r "s/^(SHOW_USED_FILES\s*=).*$/\1 YES/" | \
	cat)"
	if [ "${HAVE_DOT}" ] ; then
		Doxyfile="$(echo "${Doxyfile}" | \
		sed -r "s/^(CALL_GRAPH\s*=).*$/\1 YES/" | \
		sed -r "s/^(CALLER_GRAPH\s*=).*$/\1 YES/" | \
		cat)"
	fi
fi

if ((0)) ; then
	sed -r "s/^(QT_AUTOBRIEF\s*=).*$/\1 YES/" | \
	sed -r "s/^(SHOW_DIRECTORIES\s*=).*$/\1 YES/" | \
	sed -r "s/^(INLINE_INHERITED_MEMB\s*=).*$/\1 YES/" | \
	cat
fi

if [ "${OUT_DIR}" ] ; then
	Doxyfile="$(echo "${Doxyfile}" | \
	sed -r "s|^(HTML_OUTPUT\s*=).*$|\1 ${OUT_DIR}|" | \
	cat)"
fi

if ((F_DEBUG == 1)) ; then
	less <<<"${Doxyfile}"
else
	doxygen - <<<"${Doxyfile}"
fi

