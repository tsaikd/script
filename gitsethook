#!/bin/bash

PN="${BASH_SOURCE[0]##*/}"
PD="${BASH_SOURCE[0]%/*}"

source "${PD}/lib/die"

function usage() {
	cat <<EOF
Usage: ${PN} <Project>
Options:
  -h       : show this help message
EOF
	[ $# -gt 0 ] && { echo ; die "$@" ; } || exit 0
}

# $1: command
# $2: filepath
function addCmdToFile() {
	local cmd="${1}"
	local f="${2}"
	if [ ! -f "${f}" ] || [ -z "$(grep "^${cmd}" "${f}")" ]; then
		echo "${cmd}" >> "${f}"
		echo "add '${cmd}' to '${PWD}/${f}'"
	fi
	chmod +x "${f}"
}

# $1: project path
function sethook() {
	local projpath="$(readlink -f "${1}")"
	pushd "${projpath}" &>/dev/null
	local gitdir="$(git rev-parse --git-dir 2>/dev/null)" || die "Target project is not git repository"
	gitdir="$(readlink -f "${gitdir}")"
	popd &>/dev/null
	local hookdir="${gitdir}/hooks"

	pushd "${hookdir}" &>/dev/null
	addCmdToFile "exec git update-server-info" "post-commit"
	addCmdToFile "exec git update-server-info" "post-receive"
	popd &>/dev/null
}

type getopt cat grep chmod git >/dev/null || exit $?

(($# == 0)) && usage "Invalid parameters"
opt="$(getopt -o h -- "$@")" || usage "Parse options failed"

eval set -- "${opt}"
while true ; do
	case "${1}" in
	-h) usage ; shift ;;
	--) shift ; break ;;
	*) echo "Internal error!" ; exit 1 ;;
	esac
done

for i in "$@" ; do
	sethook "${i}"
done

